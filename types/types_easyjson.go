// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComUlstuScheduleParserTypes(in *jlexer.Lexer, out *Week) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "days":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v1 := 0
				for !in.IsDelim(']') {
					if v1 < 7 {
						easyjson6601e8cdDecodeGithubComUlstuScheduleParserTypes1(in, &(out.Days)[v1])
						v1++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComUlstuScheduleParserTypes(out *jwriter.Writer, in Week) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"days\":"
		out.RawString(prefix[1:])
		out.RawByte('[')
		for v2 := range in.Days {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson6601e8cdEncodeGithubComUlstuScheduleParserTypes1(out, (in.Days)[v2])
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Week) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComUlstuScheduleParserTypes(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Week) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComUlstuScheduleParserTypes(l, v)
}
func easyjson6601e8cdDecodeGithubComUlstuScheduleParserTypes1(in *jlexer.Lexer, out *Day) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lessons":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v3 := 0
				for !in.IsDelim(']') {
					if v3 < 8 {
						easyjson6601e8cdDecodeGithubComUlstuScheduleParserTypes2(in, &(out.Lessons)[v3])
						v3++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComUlstuScheduleParserTypes1(out *jwriter.Writer, in Day) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lessons\":"
		out.RawString(prefix[1:])
		out.RawByte('[')
		for v4 := range in.Lessons {
			if v4 > 0 {
				out.RawByte(',')
			}
			easyjson6601e8cdEncodeGithubComUlstuScheduleParserTypes2(out, (in.Lessons)[v4])
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComUlstuScheduleParserTypes2(in *jlexer.Lexer, out *Lesson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sub_lessons":
			if in.IsNull() {
				in.Skip()
				out.SubLessons = nil
			} else {
				in.Delim('[')
				if out.SubLessons == nil {
					if !in.IsDelim(']') {
						out.SubLessons = make([]SubLesson, 0, 0)
					} else {
						out.SubLessons = []SubLesson{}
					}
				} else {
					out.SubLessons = (out.SubLessons)[:0]
				}
				for !in.IsDelim(']') {
					var v5 SubLesson
					easyjson6601e8cdDecodeGithubComUlstuScheduleParserTypes3(in, &v5)
					out.SubLessons = append(out.SubLessons, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComUlstuScheduleParserTypes2(out *jwriter.Writer, in Lesson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sub_lessons\":"
		out.RawString(prefix[1:])
		if in.SubLessons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.SubLessons {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeGithubComUlstuScheduleParserTypes3(out, v7)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComUlstuScheduleParserTypes3(in *jlexer.Lexer, out *SubLesson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = Duration(in.Int())
		case "type":
			out.Type = LessonType(in.Int())
		case "group":
			out.Group = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "teacher":
			out.Teacher = string(in.String())
		case "room":
			out.Room = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComUlstuScheduleParserTypes3(out *jwriter.Writer, in SubLesson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"teacher\":"
		out.RawString(prefix)
		out.String(string(in.Teacher))
	}
	{
		const prefix string = ",\"room\":"
		out.RawString(prefix)
		out.String(string(in.Room))
	}
	out.RawByte('}')
}
